#include "DHT.h"
#include <WiFi.h>  // For Raspberry Pi Pico W


// Wi-Fi credentials
const char* ssid = "Vodafone2";
             // Replace with your Wi-Fi network name
const char* password = "kTgxMdRq6M";  // Replace with your Wi-Fi password


// DHT sensor setup
#define DHTPIN 0  // GPIO pin connected to the DHT sensor (update to your correct pin)
#define DHTTYPE DHT11  // DHT 11 sensor type
DHT dht(DHTPIN, DHTTYPE);


// Gas sensor and buzzer setup
int Pin = 26;  // Analog pin connected to gas sensor (ADC pin)
int buzzer = 10;     // Pin connected to the buzzer
int sensor_reading = 0; // Variable to store gas sensor reading


// Create a Wi-Fi server object
WiFiServer server(80);


void setup() {
  Serial.begin(115200);


  // Set up pins for buzzer and gas sensor
  pinMode(buzzer, OUTPUT);
  pinMode(Pin, INPUT);
 
  // Initialize DHT sensor
  dht.begin();


  // Connect to Wi-Fi
  Serial.print("Connecting to Wi-Fi...");
  WiFi.begin(ssid, password);
  
  // Wait for connection with a timeout
  int retries = 0;
  const int maxRetries = 20;
  while (WiFi.status() != WL_CONNECTED && retries < maxRetries) {
    delay(1000);
    Serial.print(".");
    retries++;
  }


  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.println("Wi-Fi connected.");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());  // Print IP after connection is established
  } else {
    Serial.println();
    Serial.println("Wi-Fi connection failed.");
    return;  // Stop further execution if Wi-Fi connection fails
  }


  // Start the server
  server.begin();
  Serial.println("Server started.");
}


void loop() {


  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Wi-Fi not connected. Attempting reconnection...");
    WiFi.disconnect();
    WiFi.begin(ssid, password);
    delay(1000);
    return;  // Exit loop to try reconnection in the next cycle
  }


  // Read temperature from DHT sensor
  float temp = dht.readTemperature();


  // Check if temperature sensor is working
  if (isnan(temp)) {
    Serial.println("Failed to read temperature sensor.");
    return;
  }


 


  // Check if temperature exceeds 30°C, or gas sensor reading is high
// Reading the input value in between 0 and 1023):
  sensor_reading = analogRead(Pin);
  
  // Printing sensor value
  Serial.print("Gas_sensor value: ");
  Serial.println(sensor_reading);




if (temp >25){
  digitalWrite(buzzer, HIGH);
  delay(1000);
  digitalWrite(buzzer,LOW);
  delay(1000);
  Serial.print("Temp: ");
  Serial.print(temp);// printing temp
  Serial.println(" °C"); // print degree C at the end 
  delay(2000); //deplay reading every one sec
  }
  else  {
  Serial.print("Temp: "); 
  Serial.print(temp);// printing temp
  Serial.println(" °C"); // print degree C at the end  
  digitalWrite(buzzer,LOW);


  delay(2000);}






if (sensor_reading > 100) {


digitalWrite(buzzer, HIGH);
delay(500);
digitalWrite(buzzer, LOW);
delay(500);
}
else { // the gas is below 100 keep the buzzer off 
digitalWrite(buzzer, LOW);
delay(500);
}




  // Serve the webpage
  WiFiClient client = server.available();  // Check if a client has connected


  if (client) {
    Serial.println("New Client connected.");
    
    // Wait for the client to send some data
    while (!client.available()) {
      delay(1);
    }
    
    // Send a standard HTTP response header
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
    client.println();


    // HTML content for the webpage
    client.println("<!DOCTYPE html>");
    client.println("<html>");
    client.println("<head><title>Pico W Sensor Monitor</title></head>");
    client.println("<body>");
    client.println("<h1>Sensor Data</h1>");
    
    // Display temperature
    client.print("<p>Temperature: ");
    client.print(temp);
    client.println(" &deg;C</p>");
    
    // Display gas sensor value
    client.print("<p>Gas Sensor Reading: ");
    client.print(sensor_reading);
    client.println("</p>");
    
    client.println("</body></html>");
    
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
  }


}
